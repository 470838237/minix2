硬盘启动过程：
master_boot(masterboot.s)--->secondary_boot(bootblock.s)------->boot_monitor(boothead.s)--->minix(mpx386.s)执行流程分析
分区引导块：bootblock.s(分区装有minix系统)/jumpboot.s(分区装没有minix系统)
软盘启动过程:bootblock.s---->boot_monitor(boothead.s)--->minix(mpx386.s)执行流程分析
#intsallboot程序安装到主引导分区
#然后被bios程序加载到内存0x7C00处
#然后跳转到0x7C00地址执行
#该模块将masterboot程序拷贝到内存
#0x0600后再跳转到migrate:
#然后查询分区表活动分区
#找到活动分区后将获取分区引导块程序加载(即bootblock)
#到内存地址0x7C00,然后跳转至0x7C00执行
masterboot.s(master:)
    |
    |
   \ /
#被主引导程序masterboot加载到0x7C000
#该程序加载boothead.s程序到内存0x10000
#即boothead.s(boot:),然后跳转执行0x10030
bootblock.s(boot:)
    |
    |
   \ /
初始化bss,设置boot.c变量: 1 设置设备驱动号device 2 设置活动分区内存访问地址rem_part
3 保存cur_vid_mode 4 保存cs线性地址caddr 5 保存ds线性地址daddr 6 保存boot程序运行时大小runsize
7 根据获取的处理器版本设置可访问内存范围mem
boothead.s(boot:)
    |
    |
   \ /
initialize-->
boot.c(boot(void))
    |
    |
   \ /
boot.c(execute(void)====>bootminix(void)=====>exec_image(char *image)====>minix(u32_t koff, u32_t kcs, u32_t kds,char *bootparams, size_t paramsize, u32_t aout))
    |
    |
    |
    |
    |
   \ /
boothead.s(_minix:)
    |
    |
    |
    |
    |
   \ /
kernel/mpx386.s(MINIX:====>_cstart:(==>kernel/start.c cstart===>kernel/protect.c prot_init)=====>_main:)
    |
    |
    |
    |
    |
   \ /
kernel/main.c(main)


实模式如何进入保护模式:
1 准备GDT
2 用lgdt加载gdtr
3 打开a20
4 置位cr0的pe位
5 跳转进入保护模式

















