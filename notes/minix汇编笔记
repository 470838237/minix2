pop指令先复制栈顶元素再减小sp
sp指针指向栈顶(push指令后，视频指向栈顶元素),push先增加sp再压入数据
LES( load ES)指令是把内存中指定位置的双字操作数的低位字装入指令中指定的寄存器、高位字装入ES寄存器的功能。
jmpf	offset, segment 命令  offset和segment(实际跳转的地址为segment<<4+offset)
reboot:
	call	print !将下一条指令地址压栈，并将print的地址送入ip寄存器
	.ascii	".  Hit any key to reboot.\0"!字符串被编入了.code段中。和代码段混在了一起，该处理方式是允许的，通过逻辑控制避免将数据送入cpu执行，因为在cpu看来数据毫无意义，是非法指令
	xorb	ah, ah		! Wait for keypress
	int	0x16
	call	print
	.ascii	"\r\n\0"
	int	0x19

! Print a message.
print:	pop	si		! si = String following 'call print'！将call压栈地址送入si寄存器，si的地址指向代码段的.ascii字符串，
prnext:	lodsb			! al = *si++ is char to be printed
	testb	al, al		! Null marks end
	jz	prdone
	movb	ah, #0x0E	! Print character in teletype mode
	mov	bx, #0x0001	! Page 0, foreground color
	int	0x10
	jmp	prnext
prdone:	jmp	(si)		! Continue after the string随着lodsb执行到结束，si指向了xorb	ah, ah，因此jmp	(si)是合法的



.bss
    .comm  symbol ,  size,   value
size给出最小的大小，value给出对齐要求
.common未初始化的全局变量
.bss 未初始化的静态变量以及初始化为0的静态变量或全局变量

HLT是让CPU停止动作的指令，不过并不是彻底地停止（如果要彻底停止CPU的动
作，只能切断电源），而是让CPU进入待机状态。只要外部发生变化，比如按下键
盘，或是移动鼠标，CPU就会醒过来，继续执行程序

call、ret、retf指令详解
本文讲解针对NASM编译器，8086处理器的call、ret、retf 指令。对于其他编译器和保护模式下的80x86,指令用法类似，可以作为参考。
    call指令
16位相对近调用
指令格式：
    call 标号
被调用的过程位于当前代码段内。它的机器指令是一个16位的有符号数，也就是说被调用的过程的首地址必须位于距离当前call指令-32768~+32767字节的地方。
需要注意的是：标号不会原封不动地出现在机器码的操作数中。机器码中的操作数在编译阶段生成，具体过程是用目标过程的汇编地址减去当前call指令的汇编地址，再减去3（因为这里的call指令长度为3个字节），最后保留16位的结果。
在指令执行的时候，处理器先把IP的值压栈，然后根据操作数调整IP的值（IP=IP+操作数+3），这直接导致处理器的执行流转移到目标位置处。
16位间接绝对近调用
指令格式：
    call r16/m16
这种调用也是近调用，只能调用当前代码段内的过程。指令中的操作数不是相对地址，而是绝对地址。这个绝对地址不是直接出现在指令中，而是由16位寄存器或者16位的内存单元间接给出。
在指令执行的时候，处理器先把IP的值压栈，然后寄存器的值或者16位内存单元里面的值会取代IP的原有内容。
由于这种调用的操作数是16位的绝对地址，所以可以调用当前代码段内任何位置的过程。
16位直接绝对远调用
指令格式：
    call 段地址：偏移地址
处理器在执行时，先压栈CS，再压栈IP。然后，用指令中给出的段地址取代CS的原有内容，再用指令中给出的偏移地址取代IP的原有内容。
注意：处理器是没有脑子的，如果在使用这条指令的时候，被调用的过程位于当前代码段，那么处理器会傻傻地从当前代码段转移到当前代码段。
16位间接绝对远调用
指令格式：
    call far m32
这种也属于段间调用，被调用的过程在另一个代码段内。注意，这里的16位是用来限定偏移地址的。另外，这里的关键字far不能省略。
举个例子吧，假如在数据段内声明了一个标号proc,并初始化了2个双字：
    proc: dw 0x1234 0x2000
这两个字分别是某个过程的偏移地址和段地址（低地址处是偏移地址，高地址处是段地址）。为了调用这个过程，可以这样写：
    call far [proc]
当这条指令执行时，处理器通过内存寻址取得proc处的两个字，分别是偏移地址0x1234和段地址0x2000;然后压栈CS，再压栈IP。之后，用刚才取得的段地址和偏移地址分别取代CS和IP的原值。
接下来我们看一下ret和retf指令。ret和retf经常用作call和call far的配对指令。
    ret指令
近返回指令。执行的时候，处理器从栈中弹出一个字到IP中。
    retf指令
远返回指令。当它执行时，处理器先从栈中弹出一个字到IP，再弹出一个字到CS。
最后，call、ret、retf 这三条指令执行后不会对标志位产生影响。
