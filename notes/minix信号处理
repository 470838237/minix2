PUBLIC int sigaction(sig, act, oact)
int sig;
_CONST struct sigaction *act;
struct sigaction *oact;
sig注册捕获的信号
act待设置的sigaction，oact返回旧的sigaction
SIGKILL既不能被捕获也不能被屏蔽
mp_ignore保存被忽略的信号位，mp_sigmask保存需要被阻塞的信号。mp_sigpending保存被mp_sigmask阻塞的信号位，mp_catch保存被捕获的信号位
mp_sigact为所有信号处理的sigaction

PUBLIC int sigprocmask(how, set, oset)
int how;
_CONST sigset_t *set;
sigset_t *oset;

oset返回旧的mask信号
当set为NULL时做sigmask查询处理只返回oset不做其他操作
当how==SIG_BLOCK时表示在mp_sigmask上增加新的屏蔽信号set
当how==SIG_UNBLOCK时表示在mp_sigmask上删除set，检查mp_sigpending中是否存在未屏蔽信号待处理
当how==SIG_SETMASK时表示把mp_sigmask设置为set，检查mp_sigpending中是否存在未屏蔽信号待处理
上述都不能对SIGKILL操作


PUBLIC int sigsuspend(set)
_CONST sigset_t *set;

将信号集合set挂起(将sigmask设置为set)，即使得当前进程对set集合的信号不响应，mp_sigpending中存在不属于sigmask集合信号时，处理未被屏蔽的信号



minix信号处理流程：

  process kernel stack                                                     user stack
|-------------------|                                               |-------------------|
|         es        |                                               |        ...        |<----- sp
|-------------------|                                               |-------------------|
|       ...         |                                               |                   |
|-------------------|                                               |-------------------|
|       retreg      |                                               |                  |
|-------------------|                                               |-------------------|
|       retadr      |                                               |                   |
|-------------------|                                               |-------------------|
|        pc         | process pc                                    |                   |
|-------------------|                                               |-------------------|
|        cs         |                                               |                   |
|-------------------|                                               |-------------------|
|        psw        |                                               |                   |
|-------------------|                                               |-------------------|
|        sp         | process sp                                    |                   |
|-------------------|                                               |-------------------|
|        ss         |                                               |                   |
|-------------------|                                               |-------------------|

1 初始状态,用户进程未出发信号

2 mm检测到用户进程需要响应信号，mm拷贝process kernel stack并设置用户进程堆栈,同时修改process kernel stack的pc为sighanlder程序地址,
修改sp为设置参数后的sighandler_sp,设置fp

  process kernel stack                                                     user stack
|-------------------|                                               |-------------------|
|         es        |                                               |        ...        |
|-------------------|                                               |-------------------|
|       ...         |                                               |     sigcontext    |<--|sigcontext变量 保存了全部的process kernel stack
|-------------------|                                               |-------------------|   |
|       retreg      |                                               |     sf_scpcopy    |---|sigcontext*指针
|-------------------|                                               |-------------------|   |
|       retadr      |                                               |      sf_retadr2   |   |被设置为process pc
|-------------------|                                               |-------------------|   |
|        pc         | sighandler_pc                                 |        sf_fp      |   |
|-------------------|                                               |-------------------|   |                                   sigframe
|        cs         |                                               |       sf_scp      |---|sigcontext*指针
|-------------------|                                               |-------------------|
|        psw        |                                               |       sf_code     |
|-------------------|                                               |-------------------|
|        sp         | process_sp                                    |       sf_signo    | 信号
|-------------------|                                               |-------------------|
|        ss         |                                               |       sf_retadr   | 汇编例程___sigreturn:地址 <----- sp
|-------------------|                                               |-------------------|
                                                                    |        ....       |
                                                                    |-------------------|

3 第2步骤设置完毕后等待调度程序调度用户程序，此时进程执行sighandler执行的信号处理程序。进程处理程序原型只有一个int参数，因此此前设置的栈sf_signo被视作
sighandler的参数。当sighandler执行完毕后执行return时将栈参数sf_retadr作为返回地址传递给pc。___sigreturn例程执行了sp+=16，即释放了栈参数
sf_signo，sf_code，sf_scp，sf_fp，然后jmp到posix接口_sigreturn，_sigreturn函数原型为传递一个sigcontext*指针参数。此时sf_retadr2作为该调用返回
地址，sf_scpcopy作为_sigreturn传递参数。此刻栈结构如下：

  process kernel stack                                                     user stack
|-------------------|                                               |-------------------|
|         es        |                                               |        ...        |
|-------------------|                                               |-------------------|
|       ...         |                                               |     sigcontext    |<--|sigcontext变量 保存了全部的process kernel stack
|-------------------|                                               |-------------------|   |
|       retreg      |                                               |     sf_scpcopy    |---|sigcontext*指针
|-------------------|                                               |-------------------|
|       retadr      |                                               |      sf_retadr2   |   被设置为process pc         <----- sp
|-------------------|                                               |-------------------|
|        pc         | sighandler_pc                                 |                   |
|-------------------|                                               |-------------------|
|        cs         |                                               |                   |
|-------------------|                                               |-------------------|
|        psw        |                                               |                   |
|-------------------|                                               |-------------------|
|        sp         | process_sp                                    |                   |
|-------------------|                                               |-------------------|
|        ss         |                                               |                   |
|-------------------|                                               |-------------------|
                                                                    |                   |
                                                                    |-------------------|

4 系统调用使用系统调用传递过来的sf_scpcopy访问sigcontext变量，使用user stack中sigcontext恢复process kernel stack,pc,sp都被恢复信号处理之前的状态
当调度程序重启用户程序时将process kernel stack载入寄存器后状态如下图:
  process kernel stack                                                     user stack
|-------------------|                                               |-------------------|
|         es        |                                               |        ...        |<----- sp
|-------------------|                                               |-------------------|
|       ...         |                                               |                   |
|-------------------|                                               |-------------------|
|       retreg      |                                               |                  |
|-------------------|                                               |-------------------|
|       retadr      |                                               |                   |
|-------------------|                                               |-------------------|
|        pc         | process pc                                    |                   |
|-------------------|                                               |-------------------|
|        cs         |                                               |                   |
|-------------------|                                               |-------------------|
|        psw        |                                               |                   |
|-------------------|                                               |-------------------|
|        sp         | process sp                                    |                   |
|-------------------|                                               |-------------------|
|        ss         |                                               |                   |
|-------------------|                                               |-------------------|


5 当同时有多个信号发送给进程，如果进程的栈空间足够容纳参数时，第4步pc和sp恢复之前的数值为上一个信号处理sighanlder地址和sp。当设置多个信号时即使被时钟打断也不会有问题
因为mm的调度优先级高于用户进程，再次被调度时会再次运行mm。因为不会出现信号栈设置错乱问题。
