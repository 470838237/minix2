1 进程和文件权限关系
创建文件时可以设置的权限位和gid，uid。权限位有6777，6表示I_SET_GID_BIT和I_SET_UID_BIT 777分别表示当前用户，用户组，其他可读可写可执行权限
文件系统根据当前进程的ruid,euid,rgid,egid来确定当前进程的权限
如果当前进程是超级用户则进程拥有对文件的rwx权限对目录拥有rw权限，没有超级权限则先判断该文件是否属于当前进程的用户如果同属一个用户则进程拥有当前用户
的权限，否则判断文件是否属于进程的用户组，属于则进程拥有文件用户组权限，都不匹配则拥有文件其他权限
当对一个文件进行读写或执行操作时，传递权限参数打开文件，文件系统根据当前进程拥有的权限和传递的文件权限比较如果传递的权限超出了该进程拥有的权限则操作不合法




2 进程ruid,euid,rgid,egid继承与设置
当执行系统调用fork时，子进程继承了父进程的属性，包括ruid,euid,rgid,egid,而通过系统调用SETUID, SETGID,可修改进程的ruid,euid,rgid,egid
setuid(usr)和setgid(gid)当设置的uid和gid与当前进程原来的uid和gid不一致时需要当前进程拥有超级用户(即euid=0)才能修改

3 进程权限提升
当用户需要执行超级用户才能执行的文件时需要对改文件做权限替身的操作
此时操作系统内可以预置一个拥有者为root的文件sudo
先fork一个当前进程作为子进程，然后调用execve加载sudo程序到内存。由于sudo文件需要超级权限才能读写而当前用户不具备因此会执行失败。
此时I_SET_GID_BIT和I_SET_UID_BIT的设置为了解决该问题。当文件设置了I_SET_GID_BIT和I_SET_UID_BIT时，execve执行该文件时检测
I_SET_GID_BIT和I_SET_UID_BIT是否设置，如果设置则将当前进程提升为文件的uid或gid即提升为超级用户(当然提升过程设计到身份验证如超级用户的口令验证)
当sudo运行时可以通过该进程执行其他任意进程包括其他超级用户程序。



4 系统启动后多用户创建实现

操作系统启动完毕后执行init进程，该进程并非通过fork execve系统调用加载至内存调用的，而是在内核main函数被初始化设置内存映像并加入到就绪队列。
因此没有设置init进程的ruid,euid,rgid,egid值，即init拥有超级用户权限对所有文件拥有rwx权限
init进程fork并执行其他程序。当拥有超级权限的进程fork一个进程，然后将用户中断程序加载到内存，修改当前进程ruid,euid,rgid,egid,为当前用户的uid和gid
当用户和该终端进程交互时该进程只能做该用户权限内能做的操作。